# Initialization code DBN__

import os
import json
import pickle
import joblib
import pandas as pd
from flask import Flask, jsonify, request
from peewee import (
    BooleanField, Model, IntegerField, FloatField,
    TextField, IntegrityError
)
from playhouse.shortcuts import model_to_dict
from playhouse.db_url import connect

# importing the unit test functions:
from unit_tests import *


# custom transformers and functions:

# WIP preprocessor which assigns categories and compresses some code
from custom_transformers.preprocessor import ColumnConverter

# WIP ordinal category preprocessor
from custom_transformers.custom_ordinal_encoder import custom_oe

#WIP column selection
from custom_transformers.featureselector import SelectColumns

# Initialization code

########################################
# Database

# the connect function checks if there is a DATABASE_URL env var
# if it exists, it uses it to connect to a remote postgres db
# otherwise, it connects to a local sqlite db stored in predictions.db
DB = connect(os.environ.get('DATABASE_URL') or 'sqlite:///predictions.db')

class Prediction(Model):
    admission_id = IntegerField(unique=True)
    observation = TextField()
    pred = BooleanField()
    label = BooleanField(null=True)

    class Meta:
        database = DB


DB.create_tables([Prediction], safe=True)



# End database stuff
########################################

########################################
# Unpickle the previously-trained model

with open('columns.json') as fh:
    columns = json.load(fh)

with open('pipeline.pickle', 'rb') as fh:
    pipeline = joblib.load(fh)

with open('dtypes.pickle', 'rb') as fh:
    dtypes = pickle.load(fh)

# End model un-pickling
########################################

########################################
# Begin webserver stuff

app = Flask(__name__)

@app.route('/predict', methods=['POST'])

def predict():
    """
    Produce prediction for request.
    
    Inputs:
        request: dictionary with the valid columns and corresponding values
     
    Returns: A dictionary with predictions or an error, the two potential values:
                ```
                {"admission_id": <id-of-request>,
                 "prediction": <True|False>,
                 "probability": <probability generated by model>
                }
                ```
                or 
                ```
                {
                    "observation_id": <id-of-request>,
                    "error": "some error message"
                }
                ```
                if success is False, return an error string
    """

    obs_dict = request.get_json()

    request_ok, error = check_admission_id(obs_dict)
    if not request_ok:
        response = {"admission_id": None, 'error': error}
        print(response)
        return jsonify(response), 422
    _id = obs_dict['admission_id']
    observation = obs_dict.copy()
    observation.pop('admission_id')
    
    columns_ok, error = check_valid_column(obs_dict)
    if not columns_ok:
        response = {"admission_id": _id, 'error': error}
        print(response)
        return jsonify(response), 422

    categories_valid, error = check_categorical_data(obs_dict)
    if not categories_valid:
        response = {"admission_id": _id, 'error': error}
        print(response)
        return jsonify(response), 422

    boolean_valid, error = check_boolean_data(obs_dict)
    if not boolean_valid:
        response = {"admission_id": _id, 'error': error}
        print(response)
        return jsonify(response), 422

    numerical_valid, error = check_numerical_data(obs_dict)
    if not numerical_valid:
        response = {"admission_id": _id, 'error': error}
        print(response)
        return jsonify(response), 422

    num_cat_valid, error = check_num_cat_data(observation)
    if not num_cat_valid:
        response = {"admission_id": _id, 'error': error}
        print(response)
        return jsonify(response), 422

    obs = pd.DataFrame([observation], columns=columns).astype(dtypes)
    print(obs)
    pred = pipeline.predict(obs)[0]
    print(pred)

    response = {"readmission_id": _id, 'readmission': bool(pred)}
    print(response)
    
    p = Prediction(
        admission_id=_id,
        pred = pred,
        observation=request.data
    )


    # try:
    #    p.save()
    # except IntegrityError:
    #     error_msg = "ERROR: Observation ID: '{}' already exists, it was not saved".format(_id)
    #     response["error"] = error_msg
    #     print(error_msg)
    #     DB.rollback()
    return jsonify(response)

@app.route('/update', methods=['POST'])
def update():
    obs = request.get_json()
    try:
        p = Prediction.get(Prediction.observation_id == obs['observation_id'])
        p.label = obs['label']
        p.save()
        
        select = {}
        for key in ['admission_id', 'label']:
            select[key] = model_to_dict(p)[key]

        return jsonify(select)
    except Prediction.DoesNotExist:
        error_msg = 'admission_id: "{}" does not exist'.format(obs['observation_id'])
        return jsonify({'error': error_msg})


# @app.route('/list-db-contents')
# def list_db_contents():
#     return jsonify([
#         model_to_dict(obs) for obs in Prediction.select()
#     ])

# End webserver stuff
########################################

if __name__ == "__main__":
    app.run(debug=True)